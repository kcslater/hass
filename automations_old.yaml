# Disarms if any person arrives
 - alias: 'Any Entry -> Standby'
    trigger:
     - platform: state
        entity_id: device_tracker.kailins_iphone
        to: 'home'
     - platform: state
        entity_id: device_tracker.meghans_iphone
        to: 'home'
     - platform: event
        event_type: abode_automation
        event_data:
         device_name: 'If any phone enters then Standby'
    condition:
     condition: state
     entity_id: alarm_control_panel.abode
     state: 'armed_away'
    action:
     - service: alarm_control_panel.alarm_disarm
        entity_id: alarm_control_panel.abode

# Turns alarm to Standby if 5:30am and someone home
# (Redundant with Abode, but M's GPS is sometimes bad)
  - alias: '5:30 AM At Home -> Standby'
    trigger:
      - platform: time
        at: '05:30:00'
    condition:
      - condition: state
        entity_id: group.all_devices
        state: 'home'
    action:
      - service: alarm_control_panel.alarm_disarm
        entity_id: alarm_control_panel.abode

# Turns alarm to Home if 11:00pm and someone home
# (Redundant with Abode, but M's GPS is sometimes bad)
  - alias: '11 PM At Home -> Home'
    trigger:
      - platform: time
        at: '23:00:00'
    condition:
      - condition: state
        entity_id: group.all_devices
        state: 'home'
    action:
      - service: alarm_control_panel.alarm_arm_home
        entity_id: alarm_control_panel.abode

# Turns on Front Door light if anyone gets home after sunset. Turns off after 5 minutes
  - alias: 'Any Entry After Sunset -> Porch On Then Off'
    trigger:
      #- platform: state
      #  entity_id: device_tracker.kailins_iphone
      #  to: 'home'
      #- platform: state
      #  entity_id: device_tracker.meghans_iphone
      #  to: 'home'
      - platform: event
        event_type: abode_automation
        event_data:
          device_name: 'If any phone enters then Standby'
    condition:
      - condition: state
        entity_id: sun.sun
        state: 'below_horizon'
    action:
      - service: light.turn_on
        entity_id: light.front_door
      - delay: 00:15
      - service: light.turn_off
        entity_id: light.front_door

# Turns on Living Room lights if first person gets home after sunset and before 11pm
  - alias: 'Any Entry After Sunset Before 10 -> Living Room On'
    trigger:
      #- platform: state
      #  entity_id: device_tracker.kailins_iphone
      #  to: 'home'
      #- platform: state
      #  entity_id: device_tracker.meghans_iphone
      #  to: 'home'
      - platform: event
        event_type: abode_automation
        event_data:
          device_name: 'If any phone enters then Standby'
    condition:
      - condition: state
        entity_id: sun.sun
        state: 'below_horizon'
      - condition: time
        after: '16:00:00'
        before: '22:00:00'
    action:
      service: light.turn_on
      entity_id: light.living_room

# Turns off devices if 2AM and no one home (in case of power outage)
  - alias: '2 AM Away -> Everything Off'
    trigger:
      - platform: time
        at: '02:00:00'
    condition:
      - condition: state
        entity_id: group.all_devices
        state: 'not_home'
    action:
      - service: script.turn_on
        entity_id: script.everything_off
      # in case of guests
      - service: homeassistant.turn_off
        entity_id: group.downstairs

# Turns off TV if Guest Room Stereo turns off
 - alias: 'Soundbar off -> TV off'
    trigger:
     - platform: state
        entity_id: media_player.guest_room_stereo_main
        to: 'off'
    action:
     - service: media_player.turn_off
        entity_id: media_player.vizio_smartcast

# Switches Spotify to Stereo if Stereo turns on
  - alias: 'Stereo On -> Spotify on Stereo'
    trigger:
      - platform: state
        entity_id: media_player.living_room_stereo_main
        from: 'off'
      - platform: state
        entity_id: media_player.kitchen_stereo_main
        from: 'off'
      - platform: state
        entity_id: media_player.bedroom_stereo_main
        from: 'off'
      - platform: state
        entity_id: media_player.basement_stereo_main
        from: 'off'
    condition:
      - condition: state
        entity_id: media_player.spotify
        state: 'playing'
      - condition: or
        conditions:
          - condition: state
            entity_id: sensor.spotify_source
            state: 'Kitchen Stereo'
          - condition: state
            entity_id: sensor.spotify_source
            state: 'Bedroom Stereo'
          - condition: state
            entity_id: sensor.spotify_source
            state: 'Basement Stereo'
          - condition: state
            entity_id: sensor.spotify_source
            state: 'Guest Room Stereo'
    action:
      - service: script.turn_on
        data_template:
          entity_id: >
            script.spotify_{{ trigger.entity_id.replace("media_player.", "").replace("_stereo_main", "") }}

# Switch Spotify (long, redundant stuff commented out)
  - alias: 'Spotify on Echo -> Spotify on Stereo'
    trigger:
    #   - platform: state
    #     entity_id: media_player.spotify
    #     to: 'playing'
      - platform: state
        entity_id: sensor.spotify_source
        to: 'Kitchen Echo Dot'
      - platform: state
        entity_id: sensor.spotify_source
        to: 'Bedroom Echo Dot'
      - platform: state
        entity_id: sensor.spotify_source
        to: 'Living Room Echo Dot'
      - platform: state
        entity_id: sensor.spotify_source
        to: 'Guest Room Echo Dot'
    # condition:
    #   condition: or
    #   conditions:
    #     - condition: state
    #       entity_id: sensor.spotify_source
    #       state: 'Kitchen Echo Dot'
    #     - condition: state
    #       entity_id: sensor.spotify_source
    #       state: 'Bedroom Echo Dot'
    #     - condition: state
    #       entity_id: sensor.spotify_source
    #       state: 'Living Room Echo Dot'
    #     - condition: state
    #       entity_id: sensor.spotify_source
    #       state: 'Guest Room Echo Dot'
    action:
      - service: script.turn_on
        data_template:
          entity_id: >
            script.spotify_{{ states("sensor.spotify_source").replace(" Echo Dot", "").replace(" ","_").lower() }}


